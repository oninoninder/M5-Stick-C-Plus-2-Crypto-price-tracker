#include <M5StickCPlus2.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// Function prototypes
void connectWiFi();
bool fetchCombinedData();
bool fetchCurrentPrice();
bool fetchHistoricalData();
void updateDisplay();
void drawPriceChart();
void showLoadingScreen(const char* message, int spinnerPos);
void toggleScreen();

#define DEFAULT_BRIGHTNESS 100
#define MAX_HISTORY 200
#define RATE_LIMIT 2400       // 30 seconds between updates
#define DEBOUNCE_DELAY 200    // Button debounce time

// WiFi credentials
const char* ssid = "Nino's-Wlan";
const char* password = "Nino2103";

// API endpoints
const char* currentPriceUrl = "https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd&include_24hr_change=true";
const char* historicalUrl = "https://api.coingecko.com/api/v3/coins/solana/market_chart?vs_currency=usd&days=1";

// Display layout
const int PRICE_X = 10, PRICE_Y = 10;
const int CHANGE_X = 10, CHANGE_Y = 50;
const int CHART_X = 10, CHART_Y = 90;
const int CHART_WIDTH = 220, CHART_HEIGHT = 40;

// Global variables
float solanaPrice = 0.0, priceChange24h = 0.0;
float historicalPrices[MAX_HISTORY] = {0};
unsigned long lastAPICall = 0;
unsigned long lastButtonPress = 0;
int dataPoints = 0;
bool needsHistoryUpdate = true;
bool screenOn = true;
bool lastChargingState = true;

void setup() {
  M5.begin();
  M5.Lcd.setRotation(1);
  M5.Lcd.setBrightness(DEFAULT_BRIGHTNESS);
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextColor(WHITE, BLACK);
  Serial.begin(115200);

  showLoadingScreen("Starting...", 0);
  delay(500);

  connectWiFi();

  int spinner = 0;
  while (!fetchCombinedData()) {
    showLoadingScreen("Fetching Data", spinner++);
    delay(500);
  }

  // Draw permanent UI elements
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextSize(2);
  M5.Lcd.setCursor(PRICE_X, PRICE_Y);
  M5.Lcd.print("Price:   $");
  M5.Lcd.setCursor(CHANGE_X, CHANGE_Y);
  M5.Lcd.print("24hr change: ");

  updateDisplay();
}

void loop() {
  M5.update();
  bool isCharging = M5.Power.isCharging();

  // Automatic screen control
  if (!isCharging) {
    // Turn off screen immediately when unplugged
    if (screenOn) {
      M5.Lcd.setBrightness(0);
      screenOn = false;
    }
  } else {
    // Handle button press only when charging
    if (M5.BtnA.wasPressed() && (millis() - lastButtonPress > DEBOUNCE_DELAY)) {
      toggleScreen();
      lastButtonPress = millis();
    }
  }

  // Update data regardless of screen state
  if (millis() - lastAPICall >= RATE_LIMIT) {
    if (fetchCombinedData()) {
      if (screenOn) { // Only update display if screen is on
        updateDisplay();
      }
    }
    lastAPICall = millis();
  }
  
  delay(50);
}

void toggleScreen() {
  screenOn = !screenOn;
  M5.Lcd.setBrightness(screenOn ? DEFAULT_BRIGHTNESS : 0);
  
  if (screenOn) {
    // Redraw UI elements when waking up
    M5.Lcd.fillScreen(BLACK);
    M5.Lcd.setTextColor(WHITE, BLACK);
    M5.Lcd.setTextSize(2);
    M5.Lcd.setCursor(PRICE_X, PRICE_Y);
    M5.Lcd.print("Price:   $");
    M5.Lcd.setCursor(CHANGE_X, CHANGE_Y);
    M5.Lcd.print("24hr change: ");
    updateDisplay();
  }
}

void showLoadingScreen(const char* message, int spinnerPos) {
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextSize(2);
  int textWidth = strlen(message) * 12;
  M5.Lcd.setCursor((240 - textWidth)/2, 50);
  M5.Lcd.print(message);
  M5.Lcd.setCursor(110, 80);
  M5.Lcd.print("|/-\\"[spinnerPos % 4]);
}

void connectWiFi() {
  int spinner = 0;
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    showLoadingScreen("Connecting WiFi", spinner++);
    delay(500);
  }
}

bool fetchCombinedData() {
  if (WiFi.status() != WL_CONNECTED) return false;
  bool result = needsHistoryUpdate ? fetchHistoricalData() : fetchCurrentPrice();
  needsHistoryUpdate = !needsHistoryUpdate;
  return result;
}

bool fetchCurrentPrice() {
  HTTPClient http;
  http.begin(currentPriceUrl);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    DynamicJsonDocument doc(256);
    deserializeJson(doc, http.getString());
    solanaPrice = doc["solana"]["usd"];
    priceChange24h = doc["solana"]["usd_24h_change"];
    http.end();
    return true;
  }
  http.end();
  return false;
}

bool fetchHistoricalData() {
  HTTPClient http;
  http.begin(historicalUrl);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    DynamicJsonDocument doc(4096);
    deserializeJson(doc, http.getString());
    JsonArray prices = doc["prices"];
    
    dataPoints = min((int)prices.size(), MAX_HISTORY);
    for (int i = 0; i < dataPoints; i++) {
      historicalPrices[i] = prices[i][1].as<float>();
    }
    http.end();
    return true;
  }
  http.end();
  return false;
}

void updateDisplay() {
  // Determine colors based on 24h change
  uint16_t priceColor = (priceChange24h >= 0) ? GREEN : RED;
  uint16_t changeColor = (priceChange24h >= 0) ? GREEN : RED;

  // Update price
  M5.Lcd.fillRect(PRICE_X + 85, PRICE_Y, 140, 24, BLACK);
  M5.Lcd.setCursor(PRICE_X + 85, PRICE_Y);
  M5.Lcd.setTextSize(3);
  M5.Lcd.setTextColor(priceColor, BLACK);
  M5.Lcd.printf("%.2f", solanaPrice);

  // Update 24h change
  M5.Lcd.fillRect(CHANGE_X + 110, CHANGE_Y, 100, 20, BLACK);
  M5.Lcd.setCursor(CHANGE_X + 110, CHANGE_Y);
  M5.Lcd.setTextSize(2);
  M5.Lcd.setTextColor(changeColor, BLACK);
  M5.Lcd.printf("%+.2f%%", priceChange24h);

  drawPriceChart();
}

void drawPriceChart() {
  if (dataPoints < 2) return;

  M5.Lcd.fillRect(CHART_X, CHART_Y, CHART_WIDTH, CHART_HEIGHT, BLACK);
  M5.Lcd.drawRect(CHART_X, CHART_Y, CHART_WIDTH, CHART_HEIGHT, WHITE);

  float minPrice = historicalPrices[0];
  float maxPrice = historicalPrices[0];
  for (int i = 1; i < dataPoints; i++) {
    if (historicalPrices[i] < minPrice) minPrice = historicalPrices[i];
    if (historicalPrices[i] > maxPrice) maxPrice = historicalPrices[i];
  }
  
  float padding = (maxPrice - minPrice) * 0.1;
  if (padding == 0) padding = 0.1;
  float yMin = minPrice - padding;
  float yMax = maxPrice + padding;
  
  float xStep = (float)CHART_WIDTH / (dataPoints - 1);
  float yScale = CHART_HEIGHT / (yMax - yMin);
  
  for (int i = 0; i < dataPoints - 1; i++) {
    int x1 = CHART_X + i * xStep;
    int y1 = CHART_Y + CHART_HEIGHT - (historicalPrices[i] - yMin) * yScale;
    int x2 = CHART_X + (i + 1) * xStep;
    int y2 = CHART_Y + CHART_HEIGHT - (historicalPrices[i + 1] - yMin) * yScale;
    
    M5.Lcd.drawLine(x1, y1, x2, y2, GREEN);
  }
}
