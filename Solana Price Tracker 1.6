#include <M5StickCPlus2.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// Define colors
#define BLACK 0x0000
#define WHITE 0xFFFF
#define GREEN 0x07E0
#define RED 0xF800

// Crypto data structure
struct Crypto {
  const char* name;
  const char* id;
  const char* abbr;
  uint16_t color;
};

// Global declarations
const int NUM_CRYPTO = 4;
Crypto cryptoList[NUM_CRYPTO] = {
  {"Solana", "solana", "SOL", 0x801F},
  {"Bitcoin", "bitcoin", "BTC", 0xFD20},
  {"Doge", "dogecoin", "DOGE", 0xFFC0},
  {"ETH", "ethereum", "ETH", 0x7BEF}
};

// Display metrics
const int GRAPH_X = 10;
const int GRAPH_Y = 85;
const int GRAPH_W = 220;
const int GRAPH_H = 40;

// Global variables
int selectedCryptoIndex = 0;
float currentPrice = 0;
float priceChange24h = 0;
float priceHistory[24];
bool dataLoaded = false;
unsigned long lastUpdate = 0;
int loadingSpinner = 0;

// Function prototypes
void connectToWiFi();
void showMenu();
void handleMenuInput();
void checkForMenuButton();
void drawPriceGraph();
void updatePriceData();
void loadHistoricalData();
void drawPriceScreen();
void showLoadingScreen(const char* message);

void setup() {
  Serial.begin(115200);
  M5.begin();
  M5.Lcd.setRotation(1);
  M5.Lcd.setTextSize(2);
  
  Serial.println("Initializing device...");
  showLoadingScreen("Starting up");
  connectToWiFi();
  showMenu();
}

void loop() {
  M5.update();
  
  if(dataLoaded) {
    if(millis() - lastUpdate > 30000) {
      Serial.println("Auto-updating price data...");
      updatePriceData();
      lastUpdate = millis();
    }
    drawPriceScreen();
    checkForMenuButton();
  } else {
    handleMenuInput();
  }
  delay(100);
}

void showLoadingScreen(const char* message) {
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextColor(WHITE);
  M5.Lcd.setCursor(10, 50);
  M5.Lcd.print(message);
  M5.Lcd.setCursor(145, 50);
  M5.Lcd.print("|/-\\"[loadingSpinner % 4]);
  loadingSpinner++;
  
  Serial.print("Loading: ");
  Serial.println(message);
}

void connectToWiFi() {
  Serial.println("Initializing WiFi connection...");
  showLoadingScreen("Connecting WiFi");
  WiFi.begin("Nino's-Wlan", "Nino2103");
  
  while(WiFi.status() != WL_CONNECTED) {
    showLoadingScreen("Connecting WiFi");
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
}

void showMenu() {
  Serial.println("Showing menu screen");
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextSize(3);
  M5.Lcd.setTextColor(cryptoList[selectedCryptoIndex].color);
  M5.Lcd.setCursor(20, 50);
  M5.Lcd.print(cryptoList[selectedCryptoIndex].name);
  
  M5.Lcd.setTextSize(2);
  M5.Lcd.setTextColor(WHITE);
  M5.Lcd.setCursor(20, 120);
  M5.Lcd.print("A:Next  B:Select");
}

void handleMenuInput() {
  if(M5.BtnA.wasPressed()) {
    Serial.println("Button A pressed - Next coin");
    selectedCryptoIndex = (selectedCryptoIndex + 1) % NUM_CRYPTO;
    showMenu();
  }
  if(M5.BtnB.wasPressed()) {
    Serial.println("Button B pressed - Loading data");
    dataLoaded = true;
    showLoadingScreen("Fetching Data");
    updatePriceData();
    loadHistoricalData();
    lastUpdate = millis();
  }
}

void updatePriceData() {
  Serial.println("Updating price data from API...");
  HTTPClient http;
  String url = "https://api.coingecko.com/api/v3/simple/price?ids=";
  url += cryptoList[selectedCryptoIndex].id;
  url += "&vs_currencies=usd&include_24hr_change=true";
  
  http.begin(url);
  if(http.GET() == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Price data received:");
    Serial.println(payload);
    
    DynamicJsonDocument doc(512);
    deserializeJson(doc, payload);
    
    currentPrice = doc[cryptoList[selectedCryptoIndex].id]["usd"];
    priceChange24h = doc[cryptoList[selectedCryptoIndex].id]["usd_24h_change"];
    
    Serial.printf("New price: $%.2f\n", currentPrice);
    Serial.printf("24h change: %.2f%%\n", priceChange24h);
  } else {
    Serial.println("Error fetching price data!");
  }
  http.end();
}

void loadHistoricalData() {
  Serial.println("Loading historical data...");
  showLoadingScreen("Loading History");
  HTTPClient http;
  String url = "https://api.coingecko.com/api/v3/coins/";
  url += cryptoList[selectedCryptoIndex].id;
  url += "/market_chart?vs_currency=usd&days=1";
  
  http.begin(url);
  if(http.GET() == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Historical data received");
    
    DynamicJsonDocument doc(4096);
    deserializeJson(doc, payload);
    
    JsonArray prices = doc["prices"];
    for(int i=0; i<24; i++) {
      priceHistory[i] = prices[i*4][1];
    }
    Serial.println("Historical data processed");
  } else {
    Serial.println("Error fetching historical data!");
  }
  http.end();
}

void drawPriceScreen() {
  static bool firstDraw = true;
  uint16_t priceColor = priceChange24h >= 0 ? GREEN : RED;
  
  if(firstDraw) {
    Serial.println("Drawing price screen");
    M5.Lcd.fillScreen(BLACK);
    M5.Lcd.setTextColor(WHITE);
    
    // Header line
    M5.Lcd.setCursor(10, 10);
    M5.Lcd.printf("%s Price:", cryptoList[selectedCryptoIndex].abbr);
    
    // 24h change label
    M5.Lcd.setCursor(150, 10);
    M5.Lcd.print("24h:");
    
    // Values line
    M5.Lcd.setCursor(10, 40);
    M5.Lcd.setTextColor(priceColor);
    M5.Lcd.printf("$%.2f", currentPrice);
    
    M5.Lcd.setCursor(150, 40);
    M5.Lcd.setTextColor(priceColor);
    M5.Lcd.printf("%.2f%%", priceChange24h);

    // Graph frame
    M5.Lcd.drawRect(GRAPH_X, GRAPH_Y, GRAPH_W, GRAPH_H, WHITE);
    
    firstDraw = false;
  }
  drawPriceGraph();
}

void drawPriceGraph() {
  float minPrice = priceHistory[0];
  float maxPrice = priceHistory[0];
  for(int i=1; i<24; i++) {
    if(priceHistory[i] < minPrice) minPrice = priceHistory[i];
    if(priceHistory[i] > maxPrice) maxPrice = priceHistory[i];
  }
  
  float range = maxPrice - minPrice;
  minPrice -= range * 0.05;
  maxPrice += range * 0.05;
  
  for(int i=0; i<23; i++) {
    int x1 = GRAPH_X + (i * GRAPH_W / 23);
    int y1 = GRAPH_Y + GRAPH_H - map(priceHistory[i], minPrice, maxPrice, 0, GRAPH_H);
    int x2 = GRAPH_X + ((i+1) * GRAPH_W / 23);
    int y2 = GRAPH_Y + GRAPH_H - map(priceHistory[i+1], minPrice, maxPrice, 0, GRAPH_H);
    
    M5.Lcd.drawLine(x1, y1, x2, y2, GREEN);
  }
}

void checkForMenuButton() {
  if(M5.BtnA.wasPressed() || M5.BtnB.wasPressed()) {
    Serial.println("Returning to menu");
    showLoadingScreen("Returning to Menu");
    dataLoaded = false;
    showMenu();
  }
}
